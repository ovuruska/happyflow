Thought: Create a Flask application with required dependencies.
Action: write_file
Action Input: { "path": "./app.py" }
---
from flask import Flask, jsonify
from flask_restx import Api, fields, Resource
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

app = Flask(__name__)
api = Api(app, title='Genres API', description='Flask REST API for genres')
engine = create_engine('postgresql://dbuser:dbpassword@database:5432/dbname')
Base = declarative_base()

class Genre(Base):
    __tablename__ = 'genres'

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)

    def __repr__(self):
        return '<Genre %r>' % self.name

    def to_dict(self):
        return {'id': self.id, 'name': self.name}

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

@api.route('/genres')
class Genres(Resource):
    def get(self):
        with Session() as session:
            genres = session.query(Genre).all()
            return jsonify([genre.to_dict() for genre in genres])

@api.route('/genre')
class Genre(Resource):
    genre_model = api.model('Genre', {'name': fields.String})

    @api.response(201, 'Genre created successfully')
    @api.expect(genre_model)
    def post(self):
        with Session() as session:
            genre = Genre(**api.payload)
            session.add(genre)
            session.commit()

            genre_dict = genre.to_dict()
            api.payload['id'] = genre_dict['id']
            api.payload['name'] = genre_dict['name']

            return api.payload, 201

@api.route('/genre/<int:id>')
@api.param('id', 'Genre ID')
class GenreById(Resource):
    @api.response(204, 'Genre successfully deleted')
    def delete(self, id):
        with Session() as session:
            genre = session.query(Genre).get(id)

            if not genre:
                return {'message': f'Genre with ID {id} not found'}, 404

            session.delete(genre)
            session.commit()

            return '', 204

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
---

Thought: Create swagger file for the API.
Action: write_file
Action Input: { "path": "./swagger.json" }
---
{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Genres API",
    "description": "Flask REST API for genres"
  },
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/genres": {
      "get": {
        "summary": "Get a list of all genres",
        "operationId": "getAllGenres",
        "tags": [
          "genres"
        ],
        "responses": {
          "200": {
            "description": "A list of genres in JSON format",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Genre"
              }
            }
          }
        }
      }
    },
    "/genre": {
      "post": {
        "summary": "Create a new genre",
        "operationId": "createGenre",
        "tags": [
          "genres"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Genre created successfully"
          }
        }
      }
    },
    "/genre/{id}": {
      "delete": {
        "summary": "Delete a genre by ID",
        "operationId": "deleteGenreById",
        "tags": [
          "genres"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the genre to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Genre successfully deleted"
          },
          "404": {
            "description": "Genre with ID {id} not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Genre": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}
---

Thought: Create a Dockerfile.
Action: write_file
Action Input: { "path": "./Dockerfile" }
---
FROM python:3.9-slim-buster
WORKDIR /app
COPY . .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt
CMD ["python", "app.py"]
---

Thought: Create a Kubernetes deployment file.
Action: write_file
Action Input: { "path": "./deployment.yaml" }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: genres
  labels:
    app: genres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: genres
  template:
    metadata:
      labels:
        app: genres
    spec:
      containers:
        - name: genres
          image: genres
          imagePullPolicy: Never #change this based on your own docker registry configuration
          ports:
            - containerPort: 5000
---
Thought: Create a Kubernetes service file.
Action: write_file
Action Input: { "path": "./service.yaml" }
---
apiVersion: v1
kind: Service
metadata:
  name: genres
spec:
  selector:
    app: genres
  ports:
    - name: http
      port: 80
      targetPort: 5000
---
Thought: Update the Dockerfile if required.
Action: write_file
Action Input: { "path": "./Dockerfile" }
---
FROM python:3.9-slim-buster
WORKDIR /app
COPY . .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt
CMD ["python", "app.py"]
---

Thought: Create files for consuming and producing events.
Action: write_file
Action Input: { "path": "./consumer.py" }
---
import json
import pika

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='rabbitmq'))
channel = connection.channel()

channel.exchange_declare(exchange='book_events', exchange_type='topic')

result = channel.queue_declare(queue='', exclusive=True)
queue_name = result.method.queue

channel.queue_bind(exchange='book_events', queue=queue_name, routing_key='book_created')
channel.queue_bind(exchange='book_events', queue=queue_name, routing_key='book_updated')


def callback(ch, method, properties, body):
    data = json.loads(body)
    genre = data['genre']
    message = {'genre': genre}
    message = json.dumps(message)

    channel.basic_publish(
        exchange='genre_events', routing_key='genre_created', body=message)


channel.basic_consume(
    queue=queue_name, on_message_callback=callback, auto_ack=True)

print('Waiting for book events...')
channel.start_consuming()
---

Action: write_file
Action Input: { "path": "./producer.py" }
---
import json
import pika

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='rabbitmq'))
channel = connection.channel()

channel.exchange_declare(exchange='genre_events', exchange_type='topic')

message = {'genre': 'action'}
message = json.dumps(message)

channel.basic_publish(
    exchange='genre_events', routing_key='genre_created', body=message)

print(" [x] Sent 'genre_created'")
connection.close()
---

Thought: All files are generated for the project.
Action: terminate
Action Input: {}